<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="javacodevskotlincode_topic">
         <![CDATA[
         <h3>2.1 Data types: Java vs Kotlin</h3>
         <p>

            <strong>Java Data Types</strong>&nbsp;&nbsp;&nbsp;<strong>Kotlin Data Types</strong> <br> <br>
            <font color="#0037b3">byte</font></font> p_b = 65;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_b: Byte = 65	 <br> <br>
            <font color="#0037b3">char</font></font> p_c = \'a\';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_c = \'a\'	 <br> <br>
            <font color="#0037b3">short</font></font> p_sh = 65;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_sh: Short = 65	 <br> <br>
            <font color="#0037b3">int</font></font> p_i = 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_i = 5	 <br> <br>
            <font color="#0037b3">long</font></font> p_l = 10L;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_l = 10L	 <br> <br>
            <font color="#0037b3">float</font></font> p_f = 3f;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_f = 3f	 <br> <br>
            <font color="#0037b3">double</font></font> p_d = 10.34;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_d = 10.34	 <br> <br>
            <font color="#0037b3">boolean</font></font> p_bo = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_bo = true	 <br> <br>
            <font color="#0037b3">String</font></font> p_s = <font color="#4ed297">\"java2kotlin\"</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> p_s = <font color="#4ed297">\"java2kotlin\"</font>	 <br> <br>
            <font color="#0037b3">Byte</font></font> w_b = new <font color="#0037b3">Byte</font></font>(\"65\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_b = 65	 <br> <br>
            <font color="#0037b3">Character</font></font> w_c = new <font color="#0037b3">Character</font></font>(\'a\');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_c = \'a\'	 <br> <br>
            <font color="#0037b3">Short</font></font> w_sh = new <font color="#0037b3">Short</font></font>(\"65\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_sh = 65	 <br> <br>
            <font color="#0037b3">Integer</font></font> w_i = new <font color="#0037b3">Integer</font></font>(5);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_i = 5	 <br> <br>
            <font color="#0037b3">Long</font></font> w_l = new <font color="#0037b3">Long</font></font>(10L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_l = 10L	 <br> <br>
            <font color="#0037b3">Float</font></font> w_f = new <font color="#0037b3">Float</font></font>(3f);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_f = 3f	 <br> <br>
            <font color="#0037b3">Double</font></font> w_d = new <font color="#0037b3">Double</font></font>(10.34);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_d = 10.34	 <br> <br>
            <font color="#0037b3">Boolean</font></font> w_bo = new <font color="#0037b3">Boolean</font></font>(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#0037b3">val</font> w_bo = true	 <br> <br>
            <font color="#0037b3">String</font></font> w_s = new <font color="#0037b3">String</font></font>(<font color="#4ed297">\"java2kotlin\"</font>);&nbsp;	<font color="#0037b3">val</font> w_s = <font color="#4ed297">\"java2kotlin\"</font>	 <br> <br>
         </p>

         <h3>2.2 main() method: Java vs Kotlin</h3>

         <p>
         <strong>main() method: Java</strong> <br> <br>

            <font color="#0037b3">public static void</font> main(String[] args) { <br> <br>

               &nbsp;&nbsp;&nbsp;System.out.println(<font color="#4ed297">\"Java main method!\"</font>); <br> <br>

            } <br> <br>

          <strong>main method: Kotlin</strong> <br> <br>

            <font color="#0037b3">fun</font> main(args: Array<String>) { <br> <br>

                &nbsp;&nbsp;&nbsp;println(<font color="#4ed297">\"Kotlin main method!\"</font>); <br> <br>
            } <br> <br>

         </p>


         <h3>2.3 method with return type: Java vs Kotlin</h3>

         <p>
         <strong>method returns type String: Java</strong> <br> <br>

             <font color="#0037b3">public</font> String getName(Integer id) {  <br> <br>

                &nbsp;&nbsp;&nbsp;return <font color="#4ed297">\"Kotlin\"</font>; <br> <br>

             } <br> <br>


          <strong>method returns type String: Kotlin</strong> <br> <br>

            <font color="#0037b3">fun</font> getName(id: Int): String { <br> <br>

                &nbsp;&nbsp;&nbsp;return <font color="#4ed297">\"Kotlin\"</font> <br> <br>

            } <br> <br>


         </p>

         <h3>2.4 POJO: Java vs Kotlin</h3>

         <p>
         <strong>POJO: Java</strong> <br> <br>

            <font color="#0037b3">import</font> java.io.Serializable; <br> <br>
            <font color="#0037b3">import</font> java.util.List; <br> <br>

            <font color="#0037b3">public class</font> Employee <font color="#0037b3">implements</font> Serializable { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private static final</font> long serialVersionUID = 1L; <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private String</font> name; <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private Integer</font> id; <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private boolean</font> active; <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private</font> List<String> childNames; <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public</font> Employee(){} <br> <br>


                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public</font> Employee(String name, Integer id, boolean active, List<String> childNames) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(); <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name; <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.id = id; <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.active = active; <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.childNames = childNames; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public String</font> getName() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public void</font> setName(String name) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public Integer</font> getId() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return id; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public void</font> setId(Integer id) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.id = id; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public boolean</font> isActive() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return active; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public void</font> setActive(boolean active) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.active = active; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public</font> List<String> getChildNames() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return childNames; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public void</font> setChildNames(List<String> childNames) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.childNames = childNames; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;@Override
                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public String</font> toString() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this.name + ", " + this.id + ", " + this.active + ", " + this.childNames; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;@Override <br> <br>
                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public int</font> hashCode() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.hashCode(); <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;@Override <br> <br>
                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public boolean</font> equals(Object obj) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.equals(obj); <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>
            } <br> <br>

            test above pojo <br> <br>

            <font color="#0037b3">public static void</font> main(String[] args) { <br> <br>

                &nbsp;&nbsp;&nbsp;List<String> childNames = Arrays.asList(<font color="#4ed297">\"child1\"</font>, <font color="#4ed297">\"child2\"</font>); <br> <br>

                &nbsp;&nbsp;&nbsp;Employee obj = new Employee("abcd", 1, true, childNames); <br> <br>

                &nbsp;&nbsp;&nbsp;System.out.println(obj); <br> <br>

                &nbsp;&nbsp;&nbsp;// output: abcd, 1, true, [child1, child2] <br> <br>

                &nbsp;&nbsp;&nbsp;// refer toString method <br> <br>

            } <br> <br>


          <strong>POJO: Kotlin</strong> <br> <br>

            <font color="#0037b3">import</font> java.io.Serializable <br> <br>

            <font color="#0037b3">class</font> Employee : Serializable { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private val</font> serialVersionUID = 1L <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">var</font> name: String? = null <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">var</font> id: Int? = null <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">var</font> isActive: Boolean = false <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">var</font> childNames: List<String>? = null <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">constructor</font>() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println("default constructor") <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">constructor</font>(name: String, id: Int, active: Boolean, childNames: List<String>?) { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.id = id <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.isActive = active <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.childNames = childNames <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">override fun</font> toString(): String { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this.name + ", " + this.id + ", " + this.isActive + ", " + this.childNames <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">override fun</font> hashCode(): Int { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.hashCode() <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">override fun</font> equals(obj: Any?): Boolean { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.equals(obj) <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>
            } <br> <br>

            test above pojo <br> <br>

            <font color="#0037b3">fun</font> main(args: Array<String>) { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">var</font> childNames: List<String> = listOf(<font color="#4ed297">\"child1\"</font>, <font color="#4ed297">\"child2\"</font>) <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">val</font> obj:Employee = Employee("abcd", 1, true, childNames) <br> <br>

                &nbsp;&nbsp;&nbsp;println(obj) <br> <br>

                &nbsp;&nbsp;&nbsp;// output: abcd, 1, true, [child1, child2] <br> <br>

                &nbsp;&nbsp;&nbsp;// refer toString method <br> <br>
            } <br> <br>

         </p>

         <h3>2.5 Singleton: Java vs Kotlin</h3>

         <p>
          <strong>Singleton: Java</strong> <br> <br>

            <font color="#0037b3">public class</font> JavaSingleton { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private static</font> JavaSingleton mySingleton; <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private</font> JavaSingleton() { } <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public static synchronized</font> JavaSingleton getInstance() { <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(mySingleton == null) <br> <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySingleton = new JavaSingleton(); <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mySingleton; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public</font> String getName() { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return <font color="#4ed297">\"KotlinProg\"</font>; <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

            } <br> <br>

            test above java singleton <br> <br>

            <font color="#0037b3">public static void</font> main(String[] args) { <br> <br>

                &nbsp;&nbsp;&nbsp;JavaSingleton javaSingleton = JavaSingleton.getInstance(); <br> <br>

                &nbsp;&nbsp;&nbsp;System.out.println(javaSingleton.getName()); <br> <br>

                &nbsp;&nbsp;&nbsp;//output: KotlinProg <br> <br>
            } <br> <br>


          <strong>Singleton: Kotlin</strong> <br> <br>

            <font color="#0037b3">object</font> KotlinSingleton { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">private var</font> commonApiConfig: KotlinSingleton? = null <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">fun</font> getInstance(): KotlinSingleton { <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (null == commonApiConfig) { <br> <br>

                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;commonApiConfig = KotlinSingleton <br> <br>
                     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return KotlinSingleton!! <br> <br>

                   &nbsp;&nbsp;&nbsp;} <br> <br>

               &nbsp;&nbsp;&nbsp;<font color="#0037b3">fun</font> getName(): String { <br> <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return <font color="#4ed297">\"KotlinProg\"</font> <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

            } <br> <br>

            test above kotlin singleton <br> <br> <br> <br>

            <font color="#0037b3">fun</font> main(args: Array<String>) { <br> <br>


                &nbsp;&nbsp;&nbsp;<font color="#0037b3">val</font> kotlingSingleton: KotlinSingleton = KotlinSingleton.getInstance() <br> <br>

                &nbsp;&nbsp;&nbsp;println(kotlingSingleton.getName()) <br> <br>

                &nbsp;&nbsp;&nbsp;// output: KotlinProg <br> <br>
            } <br> <br>

         </p>

         <h3>2.6 Interface: Java vs Kotlin</h3>

         <p>
             <strong> Interface: Java</strong> <br> <br>

            <font color="#0037b3">public interface</font> InterfaceJava { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public abstract void</font> getEmployeeDetails(); <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public abstract void</font> getCompanyDetails(); <br> <br>

            } <br> <br>

            <font color="#0037b3">class</font> InterfaceJavaImpl <font color="#0037b3">implements</font> InterfaceJava { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">@Override</font> <br>
                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public void</font> getEmployeeDetails() { <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<font color="#4ed297">\"Fetch employee details from DB!\"</font>); <br> <br>

                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">@Override</font> <br>
                &nbsp;&nbsp;&nbsp;<font color="#0037b3">public void</font> getCompanyDetails() { <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<font color="#4ed297">\"Fetch company details from DB!\"</font>); <br> <br>

                &nbsp;&nbsp;&nbsp;} <br> <br>

            } <br> <br>

           test above java interface <br> <br>

            <font color="#0037b3">public static void</font> main(String[] args) { <br> <br>

                &nbsp;&nbsp;&nbsp;InterfaceJava inter = new InterfaceJavaImpl(); <br> <br>
                &nbsp;&nbsp;&nbsp;inter.getEmployeeDetails(); <br> <br>
                &nbsp;&nbsp;&nbsp;inter.getCompanyDetails(); <br> <br>

                &nbsp;&nbsp;&nbsp;/* <br> <br>
                     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output: <br> <br>

                     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fetch employee details from DB! <br> <br>
                     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fetch company details from DB! <br> <br>

                &nbsp;&nbsp;&nbsp;*/ <br> <br>
            } <br> <br>

             <strong> Interface: Kotlin</strong> <br> <br>

               <font color="#0037b3">interface</font> InterfaceKotlin { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">fun</font> getEmployeeDetails() <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">fun</font> getCompanyDetails() <br> <br>

            } <br> <br>

            <font color="#0037b3">class</font> InterfaceKotlinImpl : InterfaceKotlin { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">override fun</font> getEmployeeDetails() { <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(<font color="#4ed297">\"Fetch employee details from DB!\"</font>) <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">override fun</font> getCompanyDetails() { <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(<font color="#4ed297">\"Fetch company details from DB!\"</font>) <br> <br>
                &nbsp;&nbsp;&nbsp;} <br> <br>
            } <br> <br>

           test above kotlin interface <br> <br>

            <font color="#0037b3">fun</font> main(args: Array<String>) { <br> <br>

                &nbsp;&nbsp;&nbsp;<font color="#0037b3">val</font> interImpl: InterfaceKotlin = InterfaceKotlinImpl() <br> <br>

                &nbsp;&nbsp;&nbsp;interImpl.getEmployeeDetails() <br> <br>
                &nbsp;&nbsp;&nbsp;interImpl.getCompanyDetails() <br> <br>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* <br> <br>
                         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output: <br> <br>

                         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fetch employee details from DB! <br> <br>
                         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fetch company details from DB! <br> <br>

                     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ <br> <br>

            } <br> <br>

         </p>


         ]]>
    </string>

</resources>
